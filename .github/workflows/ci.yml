name: MeatMetrics CI Pipeline

# 認証ドメインモデル実装完了時点でのCI戦略
# JUnit重視、段階的拡張、Docker開発環境活用

on:
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'

# グローバル環境変数
env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'
  MAVEN_OPTS: '-Dmaven.repo.local=.m2/repository -Xmx1024m'

jobs:
  # ==============================================================================
  # Stage 1: Backend JUnit Tests (最優先 - 認証ドメイン対応)
  # ==============================================================================
  backend-test:
    name: 🧪 Backend Unit Tests (JUnit 5)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: ☕ Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'
          
      - name: 📦 Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
            
      - name: 🔍 Verify Maven Configuration
        run: |
          mvn --version
          mvn help:effective-pom -q
          
      - name: 🧪 Run Unit Tests (認証ドメイン中心)
        run: |
          mvn clean test \
            -B \
            -Dspring.profiles.active=test \
            -Dmaven.test.failure.ignore=false \
            --fail-at-end
            
      - name: 📊 Generate Test Report
        if: always()
        run: |
          find target/surefire-reports -name "*.xml" -exec cat {} \;
          
      - name: 📈 Upload Test Results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: 'Backend JUnit Test Results'
          path: 'backend/target/surefire-reports/*.xml'
          reporter: 'java-junit'
          
      - name: 💾 Archive Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-reports
          path: backend/target/surefire-reports/

  # ==============================================================================
  # Stage 2: Build Verification (コンパイル・パッケージング確認)
  # ==============================================================================
  backend-build:
    name: 🏗️ Backend Build Verification
    runs-on: ubuntu-latest
    needs: backend-test
    defaults:
      run:
        working-directory: ./backend
        
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: ☕ Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'
          
      - name: 📦 Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
            
      - name: 🏗️ Build Application (Skip Tests)
        run: |
          mvn clean package \
            -B \
            -DskipTests \
            -Dspring.profiles.active=prod \
            --fail-at-end
            
      - name: 📊 Verify JAR Creation
        run: |
          ls -la target/*.jar
          java -jar target/*.jar --version || echo "JAR verification completed"
          
      - name: 💾 Archive Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: backend/target/*.jar
          retention-days: 7

  # ==============================================================================
  # Stage 3: Frontend Basic Verification (軽量化)
  # ==============================================================================
  frontend-check:
    name: 🎨 Frontend Basic Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
        
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
          
      - name: 📦 Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          
      - name: 🔍 TypeScript Check
        run: |
          npm run type-check || npx tsc --noEmit
          
      - name: 🏗️ Build Verification
        run: |
          npm run build
          
      - name: 📊 Bundle Size Check
        run: |
          ls -la dist/
          du -sh dist/
          
      - name: 💾 Archive Frontend Build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 7

  # ==============================================================================
  # Stage 4: Security & Quality Gates (基本)
  # ==============================================================================
  security-scan:
    name: 🔒 Security & Dependency Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔍 Run OSSAR (GitHub Security Scanner)
        uses: github/ossar-action@v1
        id: ossar
        
      - name: 📊 Upload SARIF Results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.ossar.outputs.sarifFile }}

  # ==============================================================================
  # Summary Job (全ジョブの結果集約)
  # ==============================================================================
  ci-summary:
    name: 📋 CI Summary
    runs-on: ubuntu-latest
    needs: [backend-test, backend-build, frontend-check]
    if: always()
    
    steps:
      - name: 📊 Check All Job Results
        run: |
          echo "=== CI Pipeline Summary ==="
          echo "Backend Tests: ${{ needs.backend-test.result }}"
          echo "Backend Build: ${{ needs.backend-build.result }}"
          echo "Frontend Check: ${{ needs.frontend-check.result }}"
          
          if [ "${{ needs.backend-test.result }}" = "failure" ] || 
             [ "${{ needs.backend-build.result }}" = "failure" ] || 
             [ "${{ needs.frontend-check.result }}" = "failure" ]; then
            echo "❌ CI Pipeline Failed"
            exit 1
          else
            echo "✅ CI Pipeline Passed"
          fi

# ==============================================================================
# Future Extensions (Phase 2以降で段階的に追加)
# ==============================================================================
# 
# integration-test:
#   - Testcontainers + PostgreSQL
#   - @DataJpaTest, @SpringBootTest
#   - Spring Security統合テスト
#
# docker-build:
#   - マルチステージDockerビルド
#   - イメージの脆弱性スキャン
#   - レジストリへのプッシュ
#
# deployment:
#   - Staging環境への自動デプロイ
#   - Production環境への手動承認デプロイ
#   - ヘルスチェック統合
# ==============================================================================
