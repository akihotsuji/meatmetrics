---
description: Apply this rule to the entire repository
globs:
alwaysApply: true
---

あなたは高度な問題解決能力を持つ AI アシスタントです。以下の指示に従って、効率的かつ正確にタスクを遂行してください。

まず、ユーザーから受け取った指示を確認します：
<指示>
{{instructions}}

<!-- このテンプレート変数はユーザーの入力プロンプトに自動置換されます -->

</指示>

この指示を元に、以下のプロセスに従って作業を進めてください：

---

1. 指示の分析と計画
   <タスク分析>

   - 主要なタスクを簡潔に要約してください。
   - 記載された技術スタックを確認し、その制約内での実装方法を検討してください。  
     **※ 技術スタックに記載のバージョンは変更せず、必要があれば必ず承認を得てください。**
   - 重要な要件と制約を特定してください。
   - 潜在的な課題をリストアップしてください。
   - タスク実行のための具体的なステップを詳細に列挙してください。
   - それらのステップの最適な実行順序を決定してください。

   ### 重複実装の防止

   実装前に以下の確認を行ってください：

   - 既存の類似機能の有無
   - 同名または類似名の関数やコンポーネント
   - 重複する API エンドポイント
   - 共通化可能な処理の特定

   このセクションは、後続のプロセス全体を導くものなので、時間をかけてでも、十分に詳細かつ包括的な分析を行ってください。
   </タスク分析>

---

2. タスクの実行

   - 特定したステップを一つずつ実行してください。
   - 一度のレスポンスでは可能な限り少ないファイルの修正を行い、修正の内容等を確認してから次の実装に移ってください。
   - 各ステップの完了後、簡潔に進捗を報告してください。
   - 実装時は以下の点に注意してください：
     - 適切なディレクトリ構造の遵守
     - 命名規則の一貫性維持
     - 共通処理の適切な配置

   ### 設計書の参照と連携の確保

   実装を行う際は、必ず以下の設計書を参照してください：

   - **基本設計書**: `docs/basic_design.md`
   - **詳細設計書**: `docs/detail/` ディレクトリ内の該当する設計書
   - **各種設計書**: システムアーキテクチャ、データベース、API、セキュリティ、UI 設計書（`docs/`内）

   実装における重要な原則：

   - フロントエンドとバックエンドの連携において齟齬が生じないよう、設計書に記載された API 仕様、データ構造、認証フローを正確に実装してください
   - API エンドポイント、リクエスト/レスポンス形式、エラーハンドリングは設計書通りに実装し、フロントエンド・バックエンド間で整合性を保ってください
   - 設計書に記載されていない変更や追加が必要な場合は、まず設計書の更新を提案し、承認を得てから実装を行ってください
   - 実装中に設計書との矛盾を発見した場合は、即座に報告し、設計書の修正または実装方針の変更について指示を求めてください
   - 新しい機能の実装が完了した場合は、`docs/detail`に詳細設計書を作成してください

---

3. 品質管理と問題対応

   - 各タスクの実行結果を迅速に検証してください。
   - エラーや不整合が発生した場合は、以下のプロセスで対応してください：
     a. 問題の切り分けと原因特定（ログ分析、デバッグ情報の確認）
     b. 対策案の作成と実施
     c. 修正後の動作検証
     d. デバッグログの確認と分析

   - 検証結果は以下の形式で記録してください：
     a. 検証項目と期待される結果
     b. 実際の結果と差異
     c. 必要な対応策（該当する場合）

---

4. 最終確認
   - すべてのタスクが完了したら、成果物全体を評価してください。
   - 当初の指示内容との整合性を確認し、必要に応じて調整を行ってください。
   - 実装した機能に重複がないことを最終確認してください。

---

5. 結果報告
   以下のフォーマットで最終的な結果を報告してください：

   ```markdown
   # 実行結果報告

   ## 概要

   [全体の要約を簡潔に記述]

   ## 実行ステップ

   1. [ステップ 1 の説明と結果]
   2. [ステップ 2 の説明と結果]
      ...

   ## 最終成果物

   [成果物の詳細や、該当する場合はリンクなど]

   ## 課題対応（該当する場合）

   - 発生した問題と対応内容
   - 今後の注意点

   ## 注意点・改善提案

   - [気づいた点や改善提案があれば記述]
   ```

---

## 重要な注意事項

- 不明点がある場合は、作業開始前に必ず確認を取ってください。
- 重要な判断が必要な場合は、その都度報告し、承認を得てください。
- 予期せぬ問題が発生した場合は、即座に報告し、対応策を提案してください。
- **明示的に指示されていない変更は行わないでください。** 必要と思われる変更がある場合は、まず提案として報告し、承認を得てから実施してください。
- **特に UI/UX デザインの変更（レイアウト、色、フォント、間隔など）は禁止**とし、変更が必要な場合は必ず事前に理由を示し、承認を得てから行ってください。
- **技術スタックに記載のバージョン（API やフレームワーク、ライブラリ等）を勝手に変更しないでください。** 変更が必要な場合は、その理由を明確にして承認を得るまでは変更を行わないでください。

## API 開発時の注意点

- API 関連の開発を行う場合は以下の点を考慮してください。
  - API 設計書（docs\03_api.md や docs\detail\api_xxx.md）の設計通りに実装を行う。
  - フロントエンドとバックエンドで API を通して疎通が可能か考慮する。
  - フロントエンドからのリクエスト、バックエンドからのレスポンスを考慮して実装を行う

# 技術スタック

@technologystack.md

---

# ディレクトリ構成

@directorystructure.md

---

# ドメイン駆動設計（DDD）の設計思想と実装時ルール

## DDD の基本概念

### **ドメイン（Domain）**

- **定義**: ビジネスの核心となる概念・ルール・プロセス
- **例**: ユーザー管理、認証、データ分析、レポート生成
- **目的**: ビジネス要件を技術実装から独立して理解・設計

### **境界付けられたコンテキスト（Bounded Context）**

- **定義**: 特定のドメイン内での一貫したモデルとルール
- **例**:
  - `UserManagement`: ユーザー登録・更新・削除
  - `Authentication`: ログイン・認証・認可
  - `DataAnalysis`: データ処理・分析・可視化
- **目的**: ドメイン間の境界を明確化し、モデルの一貫性を保つ

### **ユビキタス言語（Ubiquitous Language）**

- **定義**: 開発者とビジネス関係者が共有する共通言語
- **例**:
  - `User`（ユーザー）
  - `Authentication`（認証）
  - `DataAnalysis`（データ分析）
- **目的**: コミュニケーションの齟齬を防ぎ、要件の正確な理解を促進

## DDD のレイヤー構成

### **プレゼンテーション層（Presentation Layer）**

- **役割**: ユーザーインターフェース、API エンドポイント
- **技術**: Spring Boot Controller、React Components
- **責任**: リクエストの受信、レスポンスの返却

### **アプリケーション層（Application Layer）**

- **役割**: ユースケースの実装、トランザクション管理
- **技術**: Spring Boot Service
- **責任**: ビジネスルールの調整、ドメインオブジェクトの操作

### **ドメイン層（Domain Layer）**

- **役割**: ビジネスルール、エンティティ、値オブジェクト
- **技術**: Java Classes、TypeScript Interfaces
- **責任**: ビジネスロジックの実装、ドメインルールの管理

### **インフラストラクチャ層（Infrastructure Layer）**

- **役割**: データベース、外部サービス、設定
- **技術**: Spring Data JPA、PostgreSQL、AWS
- **責任**: データの永続化、外部システムとの連携

## 実装時ルール

### 1. ディレクトリ構造のルール

#### **ドメイン別のパッケージ分割**

```
backend/src/main/java/com/meatmetrics/
├── user/                       # ユーザー管理ドメイン
│   ├── domain/                 # ドメイン層
│   │   ├── entity/            # エンティティ
│   │   ├── valueobject/       # 値オブジェクト
│   │   ├── repository/        # リポジトリインターフェース
│   │   └── service/           # ドメインサービス
│   ├── application/            # アプリケーション層
│   │   ├── service/           # アプリケーションサービス
│   │   ├── dto/               # データ転送オブジェクト
│   │   └── command/           # コマンドオブジェクト
│   ├── infrastructure/         # インフラストラクチャ層
│   │   ├── repository/        # リポジトリ実装
│   │   └── persistence/       # 永続化関連
│   └── presentation/           # プレゼンテーション層
│       └── controller/        # REST コントローラー
```

#### **フロントエンドのドメイン別分割**

```
frontend/src/
├── features/                   # 機能別（ドメイン別）
│   ├── user/                  # ユーザー管理機能
│   │   ├── components/        # ユーザー関連コンポーネント
│   │   ├── hooks/             # ユーザー関連フック
│   │   ├── services/          # ユーザー関連サービス
│   │   ├── stores/            # ユーザー関連ストア
│   │   └── types/             # ユーザー関連型定義
│   ├── auth/                  # 認証機能
│   │   ├── components/        # 認証関連コンポーネント
│   │   ├── hooks/             # 認証関連フック
│   │   ├── services/          # 認証関連サービス
│   │   ├── stores/            # 認証関連ストア
│   │   └── types/             # 認証関連型定義
│   └── data-analysis/         # データ分析機能
│       ├── components/        # データ分析関連コンポーネント
│       ├── hooks/             # データ分析関連フック
│       ├── services/          # データ分析関連サービス
│       ├── stores/            # データ分析関連ストア
│       └── types/             # データ分析関連型定義
├── shared/                    # 共有コンポーネント・ユーティリティ
│   ├── components/            # 共通コンポーネント
│   ├── hooks/                 # 共通フック
│   ├── services/              # 共通サービス
│   ├── stores/                # 共通ストア
│   ├── types/                 # 共通型定義
│   └── utils/                 # ユーティリティ関数
```

### 2. 命名規則

#### **Java（バックエンド）**

```java
// エンティティ
public class User { ... }
public class UserProfile { ... }

// 値オブジェクト
public class EmailAddress { ... }
public class UserId { ... }

// リポジトリインターフェース
public interface UserRepository { ... }

// ドメインサービス
public class UserDomainService { ... }

// アプリケーションサービス
public class UserApplicationService { ... }

// コントローラー
public class UserController { ... }
```

#### **TypeScript（フロントエンド）**

```typescript
// 型定義
export interface User { ... }
export interface UserProfile { ... }

// コンポーネント
export const UserList: React.FC<UserListProps> = { ... }
export const UserForm: React.FC<UserFormProps> = { ... }

// フック
export const useUser = () => { ... }
export const useUserList = () => { ... }

// サービス
export class UserService { ... }
export class AuthService { ... }

// ストア
export const useUserStore = create<UserStore>((set) => ({ ... }))
```

### 3. 依存関係のルール

#### **依存関係の方向**

```
プレゼンテーション層 → アプリケーション層 → ドメイン層 ← インフラストラクチャ層
```

#### **禁止事項**

- ドメイン層から他の層への依存
- アプリケーション層からインフラストラクチャ層への直接依存
- プレゼンテーション層からドメイン層への直接依存

#### **推奨事項**

- 依存性注入（DI）の活用
- インターフェースによる抽象化
- ファクトリーパターンの使用

### 4. データフローのルール

#### **バックエンド（Spring Boot）**

```
HTTP Request → Controller → ApplicationService → DomainService → Repository → Database
HTTP Response ← Controller ← ApplicationService ← DomainService ← Repository ← Database
```

#### **フロントエンド（React）**

```
User Action → Component → Hook → Service → Store → API → Backend
UI Update ← Component ← Hook ← Service ← Store ← API ← Backend
```

### 5. DDD 実装時の重要な原則

#### **ドメイン層の独立性**

- ドメイン層は他の層に依存しない
- ビジネスルールは技術的な詳細から独立
- エンティティと値オブジェクトは純粋な Java/TypeScript クラス

#### **アプリケーション層の調整役**

- 複数のドメインサービスを調整
- トランザクション境界の管理
- 外部システムとの連携調整

#### **インフラストラクチャ層の抽象化**

- リポジトリパターンの実装
- データベース技術の詳細を隠蔽
- 設定や外部サービスの抽象化

#### **プレゼンテーション層の薄さ**

- ビジネスロジックを含まない
- 入力値の検証と変換のみ
- エラーハンドリングの統一

---

以上の指示に従い、確実で質の高い実装を行います。指示された範囲内でのみ処理を行い、不要な追加実装は行いません。不明点や重要な判断が必要な場合は、必ず確認を取ります。
